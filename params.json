{
  "name": "Android Basics Library",
  "tagline": "This library offers some barebone code for android common to most applications. It provides simple classes and pre-written functions for - internet access, shared preferences storage and retrieval, image picker and bitmap operations, file read and write, recycler view, image downloading and quick database support",
  "body": "# Android Basics Library\r\nThis library offers some barebone code for android common to most applications.\r\nIt provides simple classes and pre-written functions for:\r\n- Internet Access\r\n- SharedPreferences storage and retrieval\r\n- ImagePicker and Bitmap operations\r\n- File read and write\r\n- Recycler View\r\n- Image Downloading\r\n- Some other basic functions like dp2pixel, etc.\r\n- Database support\r\n- Json Parsing\r\n- Marshmallow Permissions Support\r\n\r\n# Installation\r\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-AndroidBasicsLibrary-green.svg?style=true)](https://android-arsenal.com/details/1/3226)\r\n\r\nThe library is on Jcenter, so usage is really simple. Add the following dependency in your app's ```build.gradle```:\r\n```groovy\r\ndependencies {\r\n    ...\r\n    compile 'com.github.bijoysingh:android-basics:0.10.7'\r\n    ...\r\n}\r\n```\r\nYou might need to also include these in case you use the corresponding dependencies\r\n```groovy\r\ndependencies {\r\n    ...\r\n    \r\n    // For Image Downloader\r\n    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'\r\n    \r\n    // For internet access\r\n    compile 'com.mcxiaoke.volley:library:1.0.17'\r\n    \r\n    // For Timestamp utility\r\n    compile 'net.danlew:android.joda:2.8.1'\r\n    \r\n    // For basic features from Google\r\n    compile 'com.android.support:appcompat-v7:24.2.1'\r\n    compile 'com.android.support:support-v4:24.2.1'\r\n    \r\n    // For Recycler View\r\n    compile 'com.android.support:recyclerview-v7:24.2.1'\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n## Checkout on Android Arsenal\r\n\r\n\r\n# Basic Usage\r\n## Internet Access\r\nInternet access is simpler than ever. \r\nI have added a simple `DefaultQueryExecutor` class for convenient usage.\r\n```\r\nDefaultQueryExecutor executor = new DefaultQueryExecutor.Builder(context)\r\n    .setOnQueryListener(queryListener) // optional\r\n    .setAuthenticationProvider(authenticationProvider) // optional\r\n    .setTimeout(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS) // optional\r\n    .setMaxRetries() // optional\r\n    .setRetryBackoffMultiplier() // optional\r\n    .build();\r\n```\r\nYou can create a `OnQueryListener` object or have the activity making the request `implement` it.\r\n\r\n```java\r\nQueryParams query = QueryParams.Builder(url)\r\n    .setCache(cacheFilename) // optional: the filename you want to save the result to as a cache\r\n    .setQueryIdentifier(queryId) // optional\r\n    .setAuthenticated(isAuthenticated) // optional: tells if you want to use the genAuthenticationData method of the AuthenticationProvider\r\n    .setMethod(Request.Method.POST) // optional\r\n    .setExtra(extraHashMap) // optional\r\n    .addExtra(key, value) // optional\r\n    .build();\r\n```\r\n\r\nMaking a query is really simple too\r\n```java\r\nexecutor.get(query);\r\nexecutor.send(query, data);\r\n```\r\n\r\nExtend the ```QueryExecutor``` class for more control on your queries and for supporting more things.\r\n```java\r\npublic class MyQeuryExecutor extends MyQeuryExecutor {\r\n....\r\n}\r\n```\r\n\r\n\r\n## SharedPreferences storage and retrieval\r\nExtend the ```PreferenceManager``` class.\r\n```java\r\npublic class Preferences extends PreferenceManager {\r\n    \r\n    ...\r\n    \r\n    @Override\r\n    public String getPreferencesFolder() {\r\n        return \"YOUR_PREFERENCE_FOLDER_NAME\";\r\n    }\r\n}\r\n```\r\n\r\nUse the class and built in functions using ```save``` and ```load```.\r\n```java\r\nPreferences preferences = new Preferences(context);\r\npreferences.save(KEY, your_variable);\r\npreferences.load(KEY, your_default_variable);\r\n```\r\n\r\n### NOTE: \r\nIf you plan to use SharedPreferences in Services due to recent changes in Android SharedPreferences this may not be your best option.\r\nYou can goolde for a solution of use the library 'net.grandcentrix.tray:tray:0.10.0'` I have personally felt it to be really good\r\nand has a similar pattern as my library\r\n\r\n\r\n## ImagePicker and Bitmap operations\r\n```java\r\nImageManager imageManager = new ImageManager();\r\nimageManager.showFileChooser(this);\r\n```\r\n\r\nHandle the response for this using ```handleResponse``` in ```onActivityResult```\r\n```java\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    \r\n    Bitmap bmp = imageManager.handleResponse(requestCode, resultCode, data);\r\n    ...\r\n    \r\n}\r\n```\r\n\r\nYou can perform a number of Bitmap operations\r\n```java\r\nImageManager.getScaledBitmap(bitmap, scale);\r\nImageManager.resizeBitmap(bitmap, width, height)\r\nImageManager.getScaledBitmapWithHeight(bitmap, height);\r\nImageManager.getScaledBitmapWithWidth(bitmap, width);\r\n```\r\n\r\n## File read and write\r\nTo store and retreive some text, some basic support code is available. This is needed if you want to save some file/ json you receive from the server to act as cache.\r\n```java\r\nFileManager.write(context, filename, text_to_write);\r\nString text_read = FileManager.read(context, filename);\r\n```\r\n\r\nNOTE: Asynchronous read/write coming soon. \r\n\r\n## Image Downloading\r\nThis library uses the Universal Image Loader library. To use this some basic configuration is pre-built. You can do this as follows\r\n```java\r\nImageLoaderManager.displayImage(context, image_url, image_view);\r\n```\r\nor\r\n```java\r\nImageLoaderManager loader = new ImageLoaderManager(context);\r\nloader.displayImage(image_url, image_view);\r\n```\r\n\r\nYou can also customize the image loader using\r\n```java\r\nImageLoader imageLoader = ImageLoaderManager.getImageLoader(context);\r\nImageLoader imageLoader = ImageLoaderManager.getImageLoader(context, diskCacheInMB, memoryCacheInMB);\r\n```\r\nand use it as follows:\r\n```java\r\nImageAware imageAware = new ImageViewAware(image_view, false);\r\nimageLoader.displayImage(image_link, imageAware);\r\n```\r\n\r\n## Some other useful functions\r\nThese are some common useful functions. These will expand with time.\r\n```java\r\nFunctions.dpToPixels(context, dp);\r\n```\r\n\r\n## Toasts\r\nI know toasts are pretty simple to use in Android. But I personally got pissed with typing the Toast.LENGTH_SHORT and a show() everytime.\r\nSo I built a simple wrapper around it to reduce this boilerplate code.\r\nUsing a `ToastHelper` static methods\r\n```java\r\nToastHelper.show(context, R.string.your_toast_message);\r\nToastHelper.show(context, \"your toast message\");\r\n```\r\n\r\nUsing a `ToastHelper` object\r\n```java\r\nToastHelper toastHelper = new ToastHelper(context);\r\ntoastHelper.show(\"your toast method\");\r\ntoastHelper.show(R.string.your_toast_message);\r\ntoastHelper.showLong(\"your toast method\");\r\ntoastHelper.showLong(R.string.your_toast_message);\r\n```\r\n\r\n## Locale String Format Wrappers\r\n```java\r\nLocaleManager.toString(Character/Float/Double/Integer/Boolean variable);\r\nLocaleManager.toString(Float/Double variable, precision);\r\n```\r\nThis function will convert your variable to the String to these using the Locale. This functions is a wrapper around the code ```String.format```. The function will prevent Lint Warning for the same.\r\n\r\n\r\n## Recycler View\r\nUsing Recycler View cannot be easier!\r\nExtend the Recycler View Holder\r\n```java\r\npublic class YourViewHolder extends RVHolder<YourItem> {\r\n    \r\n    ...\r\n    \r\n    @Override\r\n    public void populate(YourItem data, Bundle bundle) {\r\n        // Populate your view. You can set on click listeners etc.\r\n    }\r\n}\r\n```\r\n\r\nExtend the Recycler View Adapter\r\n```java\r\npublic class YourAdapter extends RVAdapter<YourItem, YourViewHolder> {\r\n    ...    \r\n}\r\n```\r\n\r\nSetup your recycler view\r\n```java\r\n    recyclerView = new RVBuilder(context)\r\n        .setView(rootView, R.id.recycler_view)  \r\n        .setAdapter(yourAdapter)\r\n        .setOnScrollListener(onScrollListener) // optional\r\n        .build();\r\n```\r\n\r\nA full fledged example can be seen in my [TutorialApp](https://github.com/BijoySingh/TutorialApp). The class ```RVAdapter``` is well documented to understand the other helper functions.\r\n\r\n## Database Support\r\nAdding database setup is super simple. You have to do very little work!\r\n\r\nJust add a simple model like\r\n```java\r\npublic class YourDatabaseItem extends DatabaseModel {\r\n    @DBColumn(primaryKey = true, autoIncrement = true)\r\n    public Integer id;\r\n\r\n    @DBColumn\r\n    public String title;\r\n\r\n    @DBColumn\r\n    public String description;\r\n}\r\n```\r\n\r\nUsing ```@DBColumn``` you can add custom arguments like\r\n```java\r\nfieldType = DBColumn.Type.INTEGER\r\nunique = True\r\nprimaryKey = true, autoIncrement = true\r\nfieldName = \"custom_field_name\"\r\n```\r\n\r\nYou can create a custom class for your databases, or you can simply use the default database:\r\n```java\r\nDatabaseManager db = new DatabaseManager(this, new DatabaseModel[]{new YourDatabaseItem()});\r\n\r\n// To add an item\r\nYourDatabaseItem your_item = ...;\r\ndb.add(your_item);\r\n\r\n// To get all items for a custom class\r\nList<YourDatabaseItem> items = db.get(YourDatabaseItem.class);\r\n```\r\nA full fledged example can be seen in my [TutorialApp](https://github.com/BijoySingh/TutorialApp).\r\n\r\n## JSON Parsing\r\n\r\nMaking a JSON Parser is simple to work\r\n```java\r\npublic class YourItem extends JsonModel { \r\n    @JsonField\r\n    public Integer integer_field;\r\n    \r\n    @JsonField(field = \"alternate_json_field_name\") \r\n    public String string_field;\r\n    \r\n    @JsonField\r\n    public Double real_field;\r\n    \r\n    @JsonField(field = Type.BOOLEAN)\r\n    public Boolean boolean_field;\r\n    \r\n    @JsonField(field = Type.JSON)\r\n    public JSONObject json_field;\r\n}\r\n```\r\n\r\nThe method automatically detects the type of the JSON field, you can still choose to override it.\r\nFurther, it assumes that the name of the field is the JSON field, you can yet again choose to override it\r\n\r\nYou can also, quickly serialize your item into a JSON Object\r\n```java\r\nJSONObject json = item.serialize();\r\n```\r\n\r\n## TimestampItem\r\nAnother common action you need to do is convert your timestamp string to time. And also convert it to the write timezone.\r\n```java\r\nString timestamp = \"....\" // your timestamp string\r\nTimestampItem item = new TimestampItem.Builder(timestamp)\r\n    .setTimezone(hours, minutes) // optional\r\n    .setDeviceTimezone() // optional\r\n    .setTimeFormat(\"hh:mm aa\") // optional\r\n    .setDateFormat(\"dd MMMM yyyy\") // optional\r\n    .setDateTimeFormat(\"hh:mm aa, dd MMMM yyyy\") // optional\r\n    .buil()\r\n    \r\nitem.getTime(); // the time string\r\nitem.getDate(); // the date string\r\nitem.getDateTime() // the date and time string\r\nitem.getCompressedDateTime(); // the compressed date and time\r\n```\r\n\r\n## PermissionManager\r\nHandling your permissions for Marshmallow made simpler, and cleaner\r\n```java\r\n// Could be more than one permissions here\r\nString[] permissions = new String[]{Manifest.permission.ACCESS_FINE_LOCATION};\r\n\r\n// Initialise the manager object, with required permissions\r\nPermissionManager manager = new PermissionManager(context, permissions);\r\n\r\n/*\r\n * Or set them as you need them\r\n * PermissionManager manager = new PermissionManager(context);\r\n * manager.setPermissions(permissions);\r\n */\r\n```\r\n\r\nNow checking for permission is really simple\r\n```java\r\nmanager.hasPermission(Manifest.permission.ACCESS_FINE_LOCATION)\r\n```\r\n\r\nAnd requesting for permissions too\r\n```java\r\n\r\n// Using an access code fixed in the library\r\nmanager.requestPermissions();\r\n\r\n// Using a custom access code, for more control\r\nmanager.requestPermissions(SOME_REQUEST_CODE);\r\n```\r\n\r\nIt will automatically detect which permissions are already allowed, and will request the missing permissions.\r\nTo handle a response, the procedure is same as that in the usual case. You override the ```onRequestPermissionsResult``` listener.\r\n\r\n## License\r\n```\r\nCopyright 2016 Bijoy Singh Kochar\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n```\r\n\r\n## Reference Licensing\r\n### Volley\r\n```\r\nApache 2.0 License\r\nCopyright (C) 2014,2015,2016 Xiaoke Zhang\r\nCopyright (C) 2011 The Android Open Source Project\r\n```\r\n\r\n### Joda \r\n```\r\nApache 2.0 License\r\nhttps://github.com/dlew/joda-time-android/blob/master/LICENSE\r\n```\r\n\r\n### Universal Image Loader\r\n```\r\nApache 2.0 License\r\nCopyright 2011-2015 Sergey Tarasevich\r\n```\r\n```\r\n",
  "google": "UA-73798143-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}