{"name":"Android Basics Library","tagline":"This library offers some barebone code for android common to most applications. It provides simple classes and pre-written functions for - internet access, shared preferences storage and retrieval, image picker and bitmap operations, file read and write, recycler view, image downloading and quick database support","body":"# Android Basics Library\r\nThis library offers some barebone code for android common to most applications.\r\nIt provides simple classes and pre-written functions for:\r\n- Internet Access\r\n- SharedPreferences storage and retrieval\r\n- ImagePicker and Bitmap operations\r\n- File read and write\r\n- Recycler View\r\n- Image Downloading\r\n- Some other basic functions like dp2pixel, etc.\r\n- Database support\r\n- Json Parsing\r\n- Marshmallow Permissions Support (coming soon...)\r\n\r\n# Installation\r\nThe library is on Jcenter, so usage is really simple. Add the following dependency in your app's ```build.gradle```:\r\n```\r\ndependencies {\r\n    ...\r\n    compile 'com.github.bijoysingh:android-basics:0.8.14'\r\n    ...\r\n}\r\n```\r\nYou might need to also include these in case you use the corresponding dependencies\r\n```\r\ndependencies {\r\n    ...\r\n    \r\n    // For Image Downloader\r\n    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'\r\n    \r\n    // For internet access\r\n    compile 'com.mcxiaoke.volley:library:1.0.17'\r\n    \r\n    // For Timestamp utility\r\n    compile 'net.danlew:android.joda:2.8.1'\r\n    \r\n    // For basic features from Google\r\n    compile 'com.android.support:appcompat-v7:23.1.1'\r\n    compile 'com.android.support:support-v4:23.1.1'\r\n    \r\n    // For Recycler View\r\n    compile 'com.android.support:recyclerview-v7:23.1.1'\r\n    \r\n    ...\r\n}\r\n```\r\n\r\n# Basic Usage\r\n## Internet Access\r\nExtend the ```AccessManager``` class. Use the ```Access``` class to send and get requests by using objects of ```AccessItem```.\r\n```\r\npublic class Access extends AccessManager {\r\n....\r\n}\r\n```\r\n\r\nUse the class and the built in functions such as ```get``` and ```send```.\r\n```\r\nAccess access = new Access(context);\r\naccess.get(new AccessItem(link, filename, access_type, is_authenticated));\r\naccess.send(new AccessItem(link, filename, access_type, is_authenticated), data);\r\n```\r\n\r\n## SharedPreferences storage and retrieval\r\nExtend the ```PreferenceManager``` class.\r\n```\r\npublic class Preferences extends PreferenceManager {\r\n    \r\n    ...\r\n    \r\n    @Override\r\n    public String getPreferencesFolder() {\r\n        return \"YOUR_PREFERENCE_FOLDER_NAME\";\r\n    }\r\n}\r\n```\r\n\r\nUse the class and built in functions using ```save``` and ```load```.\r\n```\r\nPreferences preferences = new Preferences(context);\r\npreferences.save(KEY, your_variable);\r\npreferences.load(KEY, your_default_variable);\r\n```\r\n\r\n## ImagePicker and Bitmap operations\r\n```\r\nImageManager imageManager = new ImageManager();\r\nimageManager.showFileChooser(this);\r\n```\r\n\r\nHandle the response for this using ```handleResponse``` in ```onActivityResult```\r\n```\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    \r\n    Bitmap bmp = imageManager.handleResponse(requestCode, resultCode, data);\r\n    ...\r\n    \r\n}\r\n```\r\n\r\nYou can perform a number of Bitmap operations\r\n```\r\nImageManager.getScaledBitmap(bitmap, scale);\r\nImageManager.resizeBitmap(bitmap, width, height)\r\nImageManager.getScaledBitmapWithHeight(bitmap, height);\r\nImageManager.getScaledBitmapWithWidth(bitmap, width);\r\n```\r\n\r\n## File read and write\r\nTo store and retreive some text, some basic support code is available. This is needed if you want to save some file/ json you receive from the server to act as cache.\r\n```\r\nFileManager.write(context, filename, text_to_write);\r\nString text_read = FileManager.read(context, filename);\r\n```\r\n\r\n## Image Downloading\r\nThis library uses the Universal Image Loader library. To use this some basic configuration is pre-built. You can do this as follows\r\n```\r\nImageLoaderManager.displayImage(context, image_url, image_view);\r\n```\r\nYou can also customize the image loader using\r\n```\r\nImageLoader imageLoader = ImageLoaderManager.getImageLoader(context);\r\nImageLoader imageLoader = ImageLoaderManager.getImageLoader(context, diskCacheInMB, memoryCacheInMB);\r\n```\r\nand use it as follows:\r\n```\r\nImageAware imageAware = new ImageViewAware(image_view, false);\r\nimageLoader.displayImage(image_link, imageAware);\r\n```\r\n\r\n## Some other useful functions\r\nThese are some common useful functions. These will expand with time.\r\n```\r\nFunctions.makeToast(context, message);\r\nFunctions.dpToPixels(context, dp)\r\n```\r\n\r\n## Basic Android Lint Error Fixes\r\n```\r\nLocaleManager.toString(Character/Float/Double/Integer/Boolean variable)\r\n```\r\nThis function will convert your variable to the String to these using the Locale. This functions is a wrapper around the code ```String.format```. The function will prevent Lint Warning for the same.\r\n\r\n```\r\nResourceManager.getColor(Context context, Integer colorId)\r\n```\r\nThis was previously meant to handle version support. Now it is simply a wrapper around ContextCompat.getColor();\r\n\r\n## Recycler View\r\nUsing Recycler View cannot be easier!\r\n\r\nExtend the Recycler View Holder\r\n```\r\npublic class YourViewHolder extends RVHolder<YourItem> {\r\n    \r\n    ...\r\n    \r\n    @Override\r\n    public void populate(final YourItem data) {\r\n        // Populate your view. You can set on click listeners etc.\r\n    }\r\n}\r\n```\r\n\r\nExtend the Recycler View Adapter\r\n```\r\npublic class YourAdapter extends RVAdapter<YourItem, YourViewHolder> {\r\n    ...    \r\n}\r\n```\r\n\r\nSetup your recycler view\r\n```\r\n    recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\r\n    recyclerView.setHasFixedSize(false);\r\n    \r\n    layoutManager = new LinearLayoutManager(context);\r\n    recyclerView.setLayoutManager(layoutManager);\r\n\r\n    YourAdapter adapter = new AppAdapter(context, R.layout.your_layout_item);\r\n    recyclerView.setAdapter(adapter);\r\n```\r\n\r\nA full fledged example can be seen in my [TutorialApp](https://github.com/BijoySingh/TutorialApp).\r\n\r\n## Database Support\r\nAdding database setup is super simple. You have to do very little work!\r\n\r\nJust add a simple model like\r\n```\r\npublic class YourDatabaseItem extends DatabaseModel {\r\n    @DBColumn(primaryKey = true, autoIncrement = true)\r\n    public Integer id;\r\n\r\n    @DBColumn\r\n    public String title;\r\n\r\n    @DBColumn\r\n    public String description;\r\n}\r\n```\r\n\r\nUsing ```@DBColumn``` you can add custom arguments like\r\n```\r\nfieldType = DBColumn.Type.INTEGER\r\nunique = True\r\nprimaryKey = true, autoIncrement = true\r\nfieldName = \"custom_field_name\"\r\n```\r\n\r\nYou can create a custom class for your databases, or you can simply use the default database:\r\n```\r\nDatabaseManager db = new DatabaseManager(this, new DatabaseModel[]{new YourDatabaseItem()});\r\n\r\n// To add an item\r\nYourDatabaseItem your_item = ...;\r\ndb.add(your_item);\r\n\r\n// To get all items for a custom class\r\nList<YourDatabaseItem> items = db.get(YourDatabaseItem.class);\r\n```\r\nA full fledged example can be seen in my [TutorialApp](https://github.com/BijoySingh/TutorialApp).\r\n\r\n## JSON Parsing\r\n\r\nMaking a JSON Parser is simple to work\r\n```\r\npublic class YourItem extends JsonModel { \r\n    @JsonField\r\n    public Integer integer_field;\r\n    \r\n    @JsonField(field = \"alternate_json_field_name\") \r\n    public String string_field;\r\n    \r\n    @JsonField\r\n    public Double real_field;\r\n    \r\n    @JsonField(field = Type.BOOLEAN)\r\n    public Boolean boolean_field;\r\n    \r\n    @JsonField(field = Type.JSON)\r\n    public JSONObject json_field;\r\n}\r\n```\r\n\r\nThe method automatically detects the type of the JSON field, you can still choose to override it.\r\nFurther, it assumes that the name of the field is the JSON field, you can yet again choose to override it\r\n\r\nYou can also, quickly serialize your item into a JSON Object\r\n```\r\nJSONObject json = item.serialize();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}